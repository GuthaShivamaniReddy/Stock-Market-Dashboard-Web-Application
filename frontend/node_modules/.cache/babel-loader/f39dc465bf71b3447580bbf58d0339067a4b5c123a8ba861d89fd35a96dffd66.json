{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  console.log(`Making request to: ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('Response error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n    throw new Error('Data not found');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    throw new Error('Server error. Please try again later.');\n  } else {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'An error occurred');\n  }\n});\nexport const stockAPI = {\n  // Get list of companies\n  getCompanies: async () => {\n    const response = await api.get('/api/companies');\n    return response.data;\n  },\n  // Get current stock data\n  getStockData: async symbol => {\n    const response = await api.get(`/api/stocks/${symbol}`);\n    return response.data;\n  },\n  // Get historical stock data\n  getStockHistory: async (symbol, period = '1mo') => {\n    const response = await api.get(`/api/stocks/${symbol}/history?period=${period}`);\n    return response.data;\n  },\n  // Get market summary\n  getMarketSummary: async () => {\n    const response = await api.get('/api/market-summary');\n    return response.data;\n  },\n  // Compare multiple stocks\n  compareStocks: async symbols => {\n    const response = await api.get(`/api/compare/${symbols}`);\n    return response.data;\n  },\n  // Get sector performance\n  getSectors: async () => {\n    const response = await api.get('/api/sectors');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/api/health');\n    return response.data;\n  }\n};\n\n// Export individual functions for easier imports\nexport const getCompanies = stockAPI.getCompanies;\nexport const getStockData = stockAPI.getStockData;\nexport const getStockHistory = stockAPI.getStockHistory;\nexport const getMarketSummary = stockAPI.getMarketSummary;\nexport const compareStocks = stockAPI.compareStocks;\nexport const getSectors = stockAPI.getSectors;\nexport const healthCheck = stockAPI.healthCheck;\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","url","error","Promise","reject","response","_error$response","_error$response2","status","Error","_error$response3","_error$response3$data","data","detail","stockAPI","getCompanies","get","getStockData","symbol","getStockHistory","period","getMarketSummary","compareStocks","symbols","getSectors","healthCheck"],"sources":["C:/Users/shiva/OneDrive/Desktop/1/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making request to: ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error);\r\n    if (error.response?.status === 404) {\r\n      throw new Error('Data not found');\r\n    } else if (error.response?.status >= 500) {\r\n      throw new Error('Server error. Please try again later.');\r\n    } else {\r\n      throw new Error(error.response?.data?.detail || 'An error occurred');\r\n    }\r\n  }\r\n);\r\n\r\nexport const stockAPI = {\r\n  // Get list of companies\r\n  getCompanies: async () => {\r\n    const response = await api.get('/api/companies');\r\n    return response.data;\r\n  },\r\n\r\n  // Get current stock data\r\n  getStockData: async (symbol) => {\r\n    const response = await api.get(`/api/stocks/${symbol}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get historical stock data\r\n  getStockHistory: async (symbol, period = '1mo') => {\r\n    const response = await api.get(`/api/stocks/${symbol}/history?period=${period}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get market summary\r\n  getMarketSummary: async () => {\r\n    const response = await api.get('/api/market-summary');\r\n    return response.data;\r\n  },\r\n\r\n  // Compare multiple stocks\r\n  compareStocks: async (symbols) => {\r\n    const response = await api.get(`/api/compare/${symbols}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get sector performance\r\n  getSectors: async () => {\r\n    const response = await api.get('/api/sectors');\r\n    return response.data;\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    const response = await api.get('/api/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Export individual functions for easier imports\r\nexport const getCompanies = stockAPI.getCompanies;\r\nexport const getStockData = stockAPI.getStockData;\r\nexport const getStockHistory = stockAPI.getStockHistory;\r\nexport const getMarketSummary = stockAPI.getMarketSummary;\r\nexport const compareStocks = stockAPI.compareStocks;\r\nexport const getSectors = stockAPI.getSectors;\r\nexport const healthCheck = stockAPI.healthCheck;\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}